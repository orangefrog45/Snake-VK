#version 460
#extension GL_EXT_ray_tracing : enable

layout(location = 0) rayPayloadEXT vec4 payload;

layout(binding = 0, set = 1) uniform accelerationStructureEXT as;

layout(set = 1, binding = 1, rgba8) uniform image2D img;

#include "CommonUBO.glsl"

vec3 WorldPosFromDepth(float depth, vec2 normalized_tex_coords) {
	vec4 clipSpacePosition = vec4(normalized_tex_coords, depth, 1.0) * 2.0 - 1.0;
	vec4 worldSpacePosition = inverse(common_ubo.view) * inverse(common_ubo.proj) * clipSpacePosition;
	// Perspective division
	worldSpacePosition.xyz /= max(worldSpacePosition.w, 1e-6);
	return worldSpacePosition.xyz;
}

void main() {
  vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  vec2 uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = uv * 2.0 - 1.0;
  float aspect = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
  vec3 ro = common_ubo.cam_pos.xyz;
  vec3 rd = normalize(WorldPosFromDepth(1.0, uv) - ro);

  payload = vec4(0);
  traceRayEXT(
    as,
    gl_RayFlagsOpaqueEXT,
    0xff,
    0, 0, 0,
    ro, 0.001, rd, 1000000,
    0
  );

  imageStore(img, ivec2(gl_LaunchIDEXT), vec4(payload.rgb, 1.0));
}