#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable

struct RayPayload {
  vec3 colour;
  vec3 normal;
  uint num_bounces;
  float distance;
};

layout(location = 0) rayPayloadEXT RayPayload payload;

struct ShadowRayPayload {
  bool hit;
};

layout(location = 1) rayPayloadEXT ShadowRayPayload shadow_payload;

layout(set = 1, binding = 0) uniform accelerationStructureEXT as;

layout(set = 1, binding = 1, rgba8) uniform writeonly image2D img_output;

layout(set = 1, binding = 9) uniform sampler2D sampler_gbuffer_albedo;
layout(set = 1, binding = 10) uniform sampler2D sampler_gbuffer_normals;
layout(set = 1, binding = 11) uniform sampler2D sampler_gbuffer_depth;
layout(set = 1, binding = 12) uniform sampler2D sampler_gbuffer_rma;

#define LIGHT_BUFFER_DESCRIPTOR_SET_BINDING_OVERRIDE
#define LIGHT_BUFFER_DESCRIPTOR_SET_IDX 1
#define LIGHT_BUFFER_DESCRIPTOR_BINDING 8
#include "LightBuffers.glsl"

#include "CommonUBO.glsl"
#include "Util.glsl"


vec3 BouncePerfectReflections(vec3 ro, vec3 rd) {
  vec3 colour_sum = vec3(0);
  for (uint bounce = 0; bounce < 8; bounce++) {

    traceRayEXT(
      as,
      gl_RayFlagsOpaqueEXT,
      0xff,
      0,
      0,
      0,
      ro,
      0.001,
      rd, 
      10000,
      0
    );

    colour_sum += payload.colour;
    if (payload.distance < 0.f) {
      break;
    }

    ro = ro + rd * payload.distance;
    rd = normalize(reflect(rd, payload.normal));
  } 

  return colour_sum;
}

vec3 BounceDiffuse(vec3 ro, vec3 normal, vec3 reflected_dir, vec3 albedo, float roughness) {
  vec3 colour_sum = vec3(0);
  payload.num_bounces = 0;
  for (uint ray_idx = 0; ray_idx < 16; ray_idx++) {
    vec3 rd = normalize(mix(reflected_dir, RandomVectorOnHemisphere(normal, vec3(ro.x + ray_idx, ro.y + ray_idx, ro.z + ray_idx)), roughness));

    traceRayEXT(
      as,
      gl_RayFlagsOpaqueEXT,
      0xff,
      0,
      0,
      0,
      ro,
      0.01,
      rd, 
      10000,
      0
    );

    colour_sum += payload.colour * albedo * (1.0 / 16.0);
    if (payload.distance < 0.f) {
     // break;
    }

    //rd = normalize(reflect(rd, payload.normal));
    //current_ro += rd * payload.distance;
  }

  return colour_sum;
}

float DirectionalShadowTest(vec3 pos) {
  // Set initially to true, miss shader sets to false
  shadow_payload.hit = true;

  vec3 towards_light_dir = ssbo_light_data.dir_light.dir.xyz;

  uint flags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
  traceRayEXT(
    as,
    flags,
    0xff,
    0,
    0,
    1,
    pos,
    0.001,
    towards_light_dir, 
    10000,
    1
  );

  return 1.0 - float(shadow_payload.hit);
}


void main() {
  vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  vec2 uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);

  vec3 albedo = texelFetch(sampler_gbuffer_albedo, ivec2(gl_LaunchIDEXT), 0).rgb;
  vec3 normal = texelFetch(sampler_gbuffer_normals, ivec2(gl_LaunchIDEXT), 0).rgb;
  vec3 rma = texelFetch(sampler_gbuffer_rma, ivec2(gl_LaunchIDEXT), 0).rgb;
  vec3 ro = WorldPosFromDepth(texelFetch(sampler_gbuffer_depth, ivec2(gl_LaunchIDEXT), 0).r, uv);

  vec3 v = normalize(common_ubo.cam_pos.xyz - ro);
	vec3 r = reflect(-v, normal);
	float n_dot_v = max(dot(normal, v), 0.0);

  vec3 f0 = vec3(0.04); // TODO: Support different values for more metallic objects
  f0 = mix(f0, albedo, rma.g);

  vec3 biased_pos = ro + normal * 0.1;

  vec3 light = CalcDirectionalLight(v, f0, normal, rma.r, rma.g, albedo) * DirectionalShadowTest(biased_pos);

  vec3 colour_sum = light;
  colour_sum += BounceDiffuse(biased_pos, normal, r, albedo, rma.r);

  imageStore(img_output, ivec2(gl_LaunchIDEXT), vec4(colour_sum, 1.0));
}