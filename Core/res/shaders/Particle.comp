#version 460
#define SNAKE_PERMUTATIONS(INIT,CELL_KEY_GENERATION,CELL_KEY_SORT,CELL_KEY_START_IDX_GENERATION)

#ifdef CELL_KEY_SORT
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
#else
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
#endif

#include "CommonUBO.glsl"
#include "Particle.glsl"

layout(set = 1, binding = 0) buffer CellKeyBuf { CellKeyEntry k[]; } cell_keys;
layout(set = 1, binding = 1) buffer ParticleBuf { Particle ptcls[]; } ptcl_buf;
layout(set = 1, binding = 2) buffer CellKeyStartIndexBuf { uint i[]; } cell_key_start_idx_buf;
layout(set = 1, binding = 3) buffer ParticleBufResult { Particle ptcls[]; } ptcl_buf_result;

layout(push_constant) uniform pc {
    uint group_width;
    uint group_height;
    uint step_idx;
} push;

uint ptcl_idx = gl_GlobalInvocationID.x;

void Init() {
    ivec3 box = ivec3(100);

    ptcl_buf.ptcls[ptcl_idx].position_radius = vec4((vec3(ptcl_idx % box.x, (ptcl_idx % (box.x * box.y)) / box.x, ptcl_idx / (box.x * box.y)) - vec3(box.x, 0, box.z) * 0.5)*0.5, 0.15);
    ptcl_buf.ptcls[ptcl_idx].velocity.xyz = vec3(0);
    WakeParticle(ptcl_buf.ptcls[ptcl_idx]);
    ptcl_buf.ptcls[ptcl_idx].position_radius.xyz += vec3(-100, 20, 190);
    ptcl_buf.ptcls[ptcl_idx].velocity.xyz = -vec3(-100, 0, 0) * 0.0 + 0.1 * vec3(sin(ptcl_idx*8.34534), cos(ptcl_idx*5.34342), sin(ptcl_idx*2.3435));

    uint num_ptcls = ptcl_buf.ptcls.length();
    vec3 ptcl_col = vec3(0);
    if (ptcl_idx > num_ptcls / 3.0 * 2.0)
        ptcl_col = vec3(1.0, 0.0, 0.0);
    else if (ptcl_idx > num_ptcls / 3.0)
        ptcl_col = vec3(0.0, 1.0, 0.0);
    else
        ptcl_col = vec3(0.0, 0.0, 1.0);

    ptcl_buf.ptcls[ptcl_idx].colour.xyz = ptcl_col;
}

void GenerateCellKey() {
    ivec3 cell_pos = GetParticleCellPos(ptcl_buf.ptcls[ptcl_idx]);
    cell_keys.k[ptcl_idx].key = GetCellKey(cell_pos, ptcl_buf.ptcls.length());
    cell_keys.k[ptcl_idx].ptcl_idx = ptcl_idx;
}

// Ty Sebastian Lague "Coding Adventure: Simulating Fluids"
void BitonicSortCellKey() {
    uint i = gl_GlobalInvocationID.x;
    uint h = i & (push.group_width - 1);
    uint index_low = h + (push.group_height + 1) * (i / push.group_width);
    uint index_high = index_low + (push.step_idx == 0 ? push.group_height - 2 * h : (push.group_height + 1) / 2);

    if (index_high >= cell_keys.k.length()) return;

    CellKeyEntry value_low = cell_keys.k[index_low];
    CellKeyEntry value_high = cell_keys.k[index_high];

    if (value_low.key > value_high.key) {
        cell_keys.k[index_low] = value_high;
        cell_keys.k[index_high] = value_low;
    }
}


void TryGenerateCellKeyStartIdx() {
    if (gl_GlobalInvocationID.x >= cell_keys.k.length()) return;

    uint cell_key_at_idx = cell_keys.k[gl_GlobalInvocationID.x].key;
    uint cell_key_at_prev_idx = cell_keys.k[gl_GlobalInvocationID.x - 1].key;

    if (gl_GlobalInvocationID.x == 0 || cell_key_at_idx != cell_key_at_prev_idx)
        cell_key_start_idx_buf.i[cell_key_at_idx] = gl_GlobalInvocationID.x;
}

void main() {
#ifndef CELL_KEY_SORT
    if (ptcl_idx >= ptcl_buf.ptcls.length()) return;
#endif

#ifdef INIT
    Init();
#elif defined CELL_KEY_GENERATION
    GenerateCellKey();
#elif defined CELL_KEY_SORT
    BitonicSortCellKey();
#elif defined CELL_KEY_START_IDX_GENERATION
    TryGenerateCellKeyStartIdx();
#endif
}