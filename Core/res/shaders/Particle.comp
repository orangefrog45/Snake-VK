#version 460
#define SNAKE_PERMUTATIONS(INIT,UPDATE)

#include "CommonUBO.glsl"
#include "Particle.glsl"

layout(set = 1, binding = 0) buffer ParticleBuf { Particle ptcls[]; } ptcl_buf;

void main() {
    const uint ptcl_idx = gl_GlobalInvocationID.x;

#ifdef INIT
    ivec3 box = ivec3(215, 215, 215);

    ptcl_buf.ptcls[ptcl_idx].position_radius = vec4((vec3(ptcl_idx % box.x, (ptcl_idx % (box.x * box.y)) / box.x, ptcl_idx / (box.x * box.y)) - vec3(box.x, 0, box.z) * 0.5)*0.02, 0.1);
    ptcl_buf.ptcls[ptcl_idx].velocity.xyz = vec3(normalize(ptcl_buf.ptcls[ptcl_idx].position_radius.xyz) * 80.0) * abs(sin(ptcl_idx*0.01));
    ptcl_buf.ptcls[ptcl_idx].position_radius.xyz += vec3(100, 50, 0);
    //ptcl_buf.ptcls[ptcl_idx].velocity.xyz = -normalize(ptcl_buf.ptcls[ptcl_idx].position_radius.xyz) * 30.0 + 10 * vec3(sin(ptcl_idx*8.34534), cos(ptcl_idx*5.34342), sin(ptcl_idx*2.3435));
#elif defined UPDATE
   // ptcl_buf.ptcls[ptcl_idx].position_radius.xyz = vec3(ptcl_idx, sin(common_ubo.frame_idx * 0.01), 0.0);
#endif
}