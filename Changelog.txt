27/10/24:
-GPU particle system with RT-accelerated collisions
-Particle renderer
-Emissive material support


25/10/24:
-Some RT code restructured

16/10/24
-Fixed TLAS creation failing when no meshes are in the scene
-Single pointlight/spotlight sampling in pathtracer

12/10/24:
-Streamline/DLSS Integration
-Image event fix

8/10/24:
-TAA implementation
-Compute pipelines
-Fixed transform/raytracing buffer systems keeping references to deleted entities
-Fixed descriptor buffer offset calculation
-Component event changes

2/10/24:
-Pixel motion vector texture generation

21/9/24:
-Pathtracing improvements, more bounces
-Shadow raytracing

12/9/24:
-Ray generation shader now spawns rays from object surfaces found in GBuffer
-Rasterized GBuffer generation (raster pipeline is now deferred)
-Acceleration structure memory leak fix

11/9/24:
-Raytracing pipeline creation abstraction
-Shader reflection tweaks

8/9/24:
-Basic hardware accelerated pathtracing
--
-Made queue submissions thread-safe
-Fixed descriptor links for mesh buffers
-Fixed byte deserializer container bug

7/9/24:
-Proper links between descriptor buffers and resources so when resources reallocate they remain connected to descriptor buffers
-Acceleration structure rebuilding each frame to reflect scene updates (not optimal - will use proper AS updates if needed for performance)

5/9/24:
-Exposed materials/textures to raytracing pipeline
-Raytracing instance buffer system
-More flexible descriptor layouts for lights/textures/materials


3/9/24:
-Multi-bounce raytraced reflections
-Using storage buffer for transforms instead of push constants for availability in raytracing shaders
-Reworked mesh loading and buffers so vertex data for different meshes is combined into one large buffer for availability in raytracing shaders

1/9/24:
-Started work on hardware raytracing

28/8/24:
-Debug rendering utilities (coloured lines, spheres etc)
--
-Shader permutation compiler helper program

27/28/24:
-Full serialization/deserialization for all assets in engine
-Project saving/loading with full scene/asset serialization
-Fixes to binary serializers

26/8/24:
-Lots of asset serialization code (meshes, textures, materials)
-Fixed JobSystem deadlock/crash through deleting jobs while potentially accessing them through another thread

24/8/24:
-Mipmap generation
----
-Allowed texture loading with linear format
-Fixed imgui colour space swapchain mismatch

23/8/24:
-Added multithreaded job system and grouped frame work into jobs

22/8/24:
-Rendering now done to a separate image and blitted to swapchain image at end of frame
-Asset loading in gui
-Material preview skeleton

20/8/24:
-Fixed descriptor buffer indexing for textures
-Normal mapping
----
-Basic asset editor
-Mesh component editor
-Connected tex/material system to shaders/render pipeline
-Editor improvements

19/8/24:
-File explorer utilities
-Improved project creation, added template project
-More editor stuff
-Fixed crash on window minimize
-Fixed dialog box bug

18/8/24:
-JSON entity/scene serialization
-Editor project creation skeleton
-Editor dialog boxes


16/8/24:
-Transform system with entity parenting
-Improvements to entity viewer panel, supports parent/child view
-Reduced vertex/index buffer binding
-Fixed shader normals

14/8/24:
-ImGui integration
-Restructured render pipeline to integrate layers better
-Fixed application clean-up

12/8/24:
-Restructured engine into "core" (library) and "editor" (exe) module
-Layer manager
-Scene renderer for rendering scenes, VkRenderer for rendering utilities


11/8/24:
-Pointlights, spotlights, PBR
-Created modular renderpasses

9/6/23:
-Created SceneInfoBufferSystem class to manage and update the descriptor/resource buffers for scene data
-Camera components
-Tied events into ECS

8/6/23:
-Automatic descriptor set spec generation through spirv_cross shader reflection
-Descriptor buffer/set spec utilities to make them a bit more robust and reduce code
-Moved texture/material descriptor buffer systems into asset manager
-Window input manager
-Created LightBufferSystem to manage descriptor buffers and SSBOs for directional light (and future light sources)
-Basic scene system manager

6/8/23:
-Basic shadow mapping
-Asset management system, asset refs, texture/mesh/material assets
-Scene and entity class, transform components, start of ECS

4/8/23:
-Material UBO accessible in shaders which contains all materials in the engine, handles asset registering/updates
-Texture array accessible in shaders which contains all textures in the engine, handles asset registering/updates
-Graphics pipeline and pipeline layout abstractions


1/8/23:
-Mesh loading with assimp, added normal and texture coordinate vertex buffers
-Switched from descriptor sets to descriptor buffers

24/7/23:
-Vulkan memory allocator integration, buffer abstraction
-Texture2D class, texture loading from file and usage in shader

23/7/24:
-Some refactoring

22/7/24:
-Descriptor set with matrix UBO
-3D renderering
-Event/listener system
-Window class

21/7/24:
-Switched to dynamic rendering, removed renderpass and framebuffer objects
-Usage of index buffers

20/7/24:
-Vertex buffers used to render triangle
-Swapchain recreation on window resize

6/7/24:
-Beautiful red triangle

3/7/24:
-Project creation, logging + glfw window setup